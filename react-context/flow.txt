User can sign up
  -The user submits a username and password on the AuthForm
  -handleSubmit is called
    -the function fetches at '/api/auth/sign-up'
    -the server receives the HTTP request from the client
    -the server issues an SQL query to insert a new row in the users table in the database
    -the server sends a JSON string to the client
    -the client renders the sign-in form

User can sign in
  -The user submits a username and password on the AuthForm
  -handleSubmit is called
    -the function fetches at '/api/auth/sign-in'
    -the server receives the HTTP request from the client
    -the server hashes the password
    -the server issues an SQL query for the user's information and checks if the hashed passwords match
    -if so, the server sends a JSON string to the client containing the payload
    -the client renders the homepage

User can stay signed in
  -When the user signs in, handleSignIn is called
    -the function sets the token as 'react-context-jwt' in localStorage
  -When the user refreshes the page, componentDidMount is called
    -the function retrieves the token from localStorage and decodes it
    -if 'react-context-jwt' contains valid user information, the App's state is updated to reflect the user's information
  -render is called when state is updated
    -As the state now has a non-null user property, homepage renders on the client

User can sign out
  -When the user signs out, handleSignOut is called
    -the function removes 'react-context-jwt' from localStorage
    -the App's state is updated so that the user property is null
  -render is called when the state is updated
    -As the state now has a null user property, the authorization page renders on the client
